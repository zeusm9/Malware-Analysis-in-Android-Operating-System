import constants as const
import model
import os
import data_manager as dm
from sklearn.naive_bayes import MultinomialNB
from sklearn.svm import LinearSVC
import sys
def main():
    #arg[1]: type of classifier, arg[2]: family classification or not
    args = sys.argv
	#if dataset.txt is not created, create it.
    if(os.path.isfile("drebin/dataset.txt") == False):
        dm.get_labeled_dataset([const.S2, const.S7], const.DATA_SIZE)

    #Choose if classify the malware families or detect [malware,safeware]
    if(args[2] == "True"):
        family_classification = True
    else:
        family_classification = False
    #Choose classifier
    classifier = args[1]
    if(classifier == "svm"):
        X, y = model.prepare_data_svm(const.APPS_DATASET_PATH, family_classification)
        print("Data prepared for SVM")
        estimator = LinearSVC(C = 0.1,max_iter=2000)
    else:
        X, y = model.prepare_data_bayes(const.APPS_DATASET_PATH, family_classification)
        print("Data prepared for Naive Bayes")
        estimator = MultinomialNB()
    print("Family classification: ",family_classification)

    #Begin validation
    print("Beginning validation....")
    accuracy, precision, recall, fscore = model.validation(estimator, X, y,family_classification)
    print('Accuracy: ' + repr(accuracy))
    print('Precision: ' + repr(precision))
    print('Recall: ' + repr(recall))
    print('F1 score: ' + repr(fscore))


if __name__ == '__main__':
    main()